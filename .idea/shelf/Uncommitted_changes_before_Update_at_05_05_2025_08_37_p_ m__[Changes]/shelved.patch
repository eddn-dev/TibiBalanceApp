Index: app/src/main/java/com/app/tibibalance/ui/components/InputText.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// ui/components/InputText.kt\r\npackage com.app.tibibalance.ui.components\r\n\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.text.BasicTextField\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.SolidColor\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.runtime.*\r\n\r\n/**\r\n * Campo de texto genérico estilo “underline”.\r\n *\r\n * @param value            Texto actual.\r\n * @param onValueChange    Callback de cambios.\r\n * @param placeholder      Texto fantasma cuando está vacío.\r\n * @param isError          Marca el campo en rojo.\r\n * @param supportingText   Mensaje debajo (p. ej. error o ayuda); `null` para ninguno.\r\n * @param singleLine       Una sola línea (default) o multilinea.\r\n * @param visualTransformation   Permite formatear (p.ej. PasswordVisualTransformation).\r\n */\r\n@Composable\r\nfun InputText(\r\n    value: String,\r\n    onValueChange: (String) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    placeholder: String = \"\",\r\n    isError: Boolean = false,\r\n    supportingText: String? = null,\r\n    singleLine: Boolean = true,\r\n    visualTransformation: VisualTransformation = VisualTransformation.None\r\n) {\r\n    Column(modifier.fillMaxWidth()) {\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .heightIn(min = 40.dp),                 // alto mínimo\r\n            contentAlignment = Alignment.CenterStart\r\n        ) {\r\n            BasicTextField(\r\n                value = value,\r\n                onValueChange = onValueChange,\r\n                singleLine = singleLine,\r\n                visualTransformation = visualTransformation,\r\n                cursorBrush = SolidColor(MaterialTheme.colorScheme.primary),\r\n                textStyle = TextStyle(\r\n                    color = if (isError) MaterialTheme.colorScheme.error\r\n                    else MaterialTheme.colorScheme.onBackground,\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight.Normal\r\n                ),\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) { inner ->\r\n                Box(Modifier.fillMaxSize(), Alignment.CenterStart) {\r\n                    AnimatedPlaceholder(value.isEmpty(), placeholder, isError)\r\n                    inner()\r\n                }\r\n            }\r\n        }\r\n\r\n        FieldUnderline(isError)\r\n\r\n        supportingText?.let {\r\n            Text(\r\n                text = it,\r\n                color = if (isError) MaterialTheme.colorScheme.error\r\n                else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                fontSize = 12.sp,\r\n                modifier = Modifier.padding(top = 2.dp, start = 2.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/components/InputText.kt b/app/src/main/java/com/app/tibibalance/ui/components/InputText.kt
--- a/app/src/main/java/com/app/tibibalance/ui/components/InputText.kt	(revision 03358b365c0de884155a0ae0969b104b256227b6)
+++ b/app/src/main/java/com/app/tibibalance/ui/components/InputText.kt	(date 1746498731046)
@@ -77,7 +77,7 @@
                 color = if (isError) MaterialTheme.colorScheme.error
                 else MaterialTheme.colorScheme.onSurfaceVariant,
                 fontSize = 12.sp,
-                modifier = Modifier.padding(top = 2.dp, start = 2.dp)
+                modifier = Modifier.padding(top = 2.dp, start = 5.dp)
             )
         }
     }
Index: app/src/main/java/com/app/tibibalance/ui/screens/profile/EditProfileScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.tibibalance.ui.screens\r\n/*\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.unit.dp\r\nimport com.app.tibibalance.R\r\nimport com.app.tibibalance.ui.components.*\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.height\r\n\r\n\r\n\r\n\r\n@Composable\r\nfun FeatureEditProfileScreen() {\r\n    // Contenido de la pantalla\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n        GradientBackgroundScreen {\r\n            // Contenido de la pantalla\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .align(Alignment.TopCenter)\r\n                        .padding(top = 80.dp)\r\n                ) {\r\n                    ProfileContainer(\r\n                        imageResId = R.drawable.imagenprueba,\r\n                        size = 110.dp,\r\n                        contentDescription = \"Foto de perfil\"\r\n                    )\r\n                }\r\n                Column(\r\n                    modifier = Modifier\r\n                        .align(Alignment.TopCenter)\r\n                        .padding(top = 190.dp)\r\n                ) {\r\n                    // Este es otro botón? Falta el componente? <- - - - - - - - alargar componente\r\n                    SecondaryButton(\r\n                        modifier = Modifier\r\n                            .width(150.dp) // Cambia aquí el ancho\r\n                            .height(50.dp) // Y aquí el alto si quieres,\r\n                            .padding(top = 10.dp),\r\n                        text = \"Cambiar Foto\",\r\n                        onClick = { } //Cambiar Foto de perfil\r\n                    )\r\n                }\r\n                Column(\r\n                    modifier = Modifier.padding(top = 270.dp)\r\n                ) {\r\n                    Subtitle(\r\n                        text = \"Nombre de usuario:\"\r\n                    )\r\n                    InputText(\r\n                        value = \"nora soto\", //Colocar el nombre del usuario desde Firebase\r\n                        onValueChange = { },\r\n                        modifier = Modifier.padding(top = 10.dp)\r\n                    )\r\n                    //Falta icono de editar (lapiz)\r\n\r\n                    Subtitle(\r\n                        text = \"Correo electrónico:\",\r\n                        modifier = Modifier.padding(top = 20.dp)\r\n                    )\r\n                    /*var email by remember { mutableStateOf(\"\") } //Este input tiene el formato de registro\r\n                    InputEmail(\r\n                        value = email,\r\n                        onValueChange = { email = it }\r\n                    )*/\r\n                    InputText(\r\n                        value = \"norasoto5@gmail.com\", //Colocar el nombre del usuario desde Firebase\r\n                        onValueChange = { },\r\n                        modifier = Modifier.padding(top = 10.dp)\r\n                    )\r\n                    Caption(\r\n                        text = \"El correo electrónico no es editable\"\r\n                    )\r\n\r\n                    Subtitle(\r\n                        text = \"Fecha de nacimiento:\",\r\n                        modifier = Modifier.padding(top = 20.dp)\r\n                    )\r\n                    var date by remember { mutableStateOf(\"01/05/2025\") }\r\n                    InputDate(selectedDate = date, onDateSelected = { date = it })\r\n                    //Falta icono de editar (lapiz)\r\n\r\n                    Subtitle(\r\n                        text = \"Contraseña:\",\r\n                        modifier = Modifier.padding(top = 20.dp)\r\n                    )\r\n                    InputText(\r\n                        value = \"********\", //Colocar contraseña encriptada desde Firebase\r\n                        onValueChange = { },\r\n                        modifier = Modifier\r\n                            .padding(top = 10.dp)\r\n                    )\r\n                    //Falta icono de editar (lapiz)\r\n                    Box(modifier = Modifier.fillMaxSize()) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .align(Alignment.TopCenter)\r\n                                .padding(top = 50.dp), // Padding externo (alrededor de toda la fila)\r\n\r\n                            horizontalArrangement = Arrangement.spacedBy(30.dp), // Espacio entre los elementos de la fila\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            SecondaryButton(\r\n                                text = \"Guardar\",\r\n                                onClick = {} //Mostrar mensaje de confirmacion o warning (si no se hicieron cambios)\r\n                            )\r\n\r\n                            SecondaryButton(\r\n                                text = \"Cancelar\",\r\n                                onClick = {} //Mostrar mensaje de alerta\r\n                            )\r\n                        }\r\n                    }\r\n                    //Agregar navbar\r\n                }\r\n            }\r\n        }\r\n        Header(\r\n            title = \"Editar Información Personal\",\r\n            // Si se ingresa a esta pantalla desde los ajustes, el boton de regreso onBackClick lleva a ajustes, no a Visualizar perfil *\r\n            showBackButton = true,\r\n            onBackClick = { }, //Redireccionar a Visualizar perfil\r\n            profileImage = null\r\n        )\r\n    }\r\n}*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/tibibalance/ui/screens/profile/EditProfileScreen.kt b/app/src/main/java/com/app/tibibalance/ui/screens/profile/EditProfileScreen.kt
--- a/app/src/main/java/com/app/tibibalance/ui/screens/profile/EditProfileScreen.kt	(revision 03358b365c0de884155a0ae0969b104b256227b6)
+++ b/app/src/main/java/com/app/tibibalance/ui/screens/profile/EditProfileScreen.kt	(date 1746499003192)
@@ -1,143 +1,149 @@
-package com.app.tibibalance.ui.screens
-/*
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.foundation.layout.padding
-import androidx.compose.runtime.Composable
+package com.app.tibibalance.ui.screens.profile
+
+import android.app.DatePickerDialog
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import com.app.tibibalance.R
 import com.app.tibibalance.ui.components.*
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.foundation.layout.width
-import androidx.compose.foundation.layout.height
-
-
-
 
 @Composable
-fun FeatureEditProfileScreen() {
-    // Contenido de la pantalla
-    Box(modifier = Modifier.fillMaxSize()) {
-        GradientBackgroundScreen {
-            // Contenido de la pantalla
-            Box(
-                modifier = Modifier
-                    .fillMaxSize()
-            ) {
-                Column(
-                    modifier = Modifier
-                        .align(Alignment.TopCenter)
-                        .padding(top = 80.dp)
-                ) {
-                    ProfileContainer(
-                        imageResId = R.drawable.imagenprueba,
-                        size = 110.dp,
-                        contentDescription = "Foto de perfil"
-                    )
-                }
-                Column(
-                    modifier = Modifier
-                        .align(Alignment.TopCenter)
-                        .padding(top = 190.dp)
-                ) {
-                    // Este es otro botón? Falta el componente? <- - - - - - - - alargar componente
-                    SecondaryButton(
-                        modifier = Modifier
-                            .width(150.dp) // Cambia aquí el ancho
-                            .height(50.dp) // Y aquí el alto si quieres,
-                            .padding(top = 10.dp),
-                        text = "Cambiar Foto",
-                        onClick = { } //Cambiar Foto de perfil
-                    )
-                }
-                Column(
-                    modifier = Modifier.padding(top = 270.dp)
-                ) {
-                    Subtitle(
-                        text = "Nombre de usuario:"
-                    )
-                    InputText(
-                        value = "nora soto", //Colocar el nombre del usuario desde Firebase
-                        onValueChange = { },
-                        modifier = Modifier.padding(top = 10.dp)
-                    )
-                    //Falta icono de editar (lapiz)
+fun EditProfileScreen(
+    onChangePhoto: () -> Unit = {},
+    onSave: () -> Unit = {},
+    onCancel: () -> Unit = {}
+) {
+    // Estado de la fecha
+    var date by remember { mutableStateOf("01/05/2025") }
+    val context = LocalContext.current
+
+    // Creamos externamente el DatePickerDialog
+    val datePicker = remember {
+        DatePickerDialog(
+            context,
+            { _, year, month, day ->
+                // month es 0-based
+                date = "%02d/%02d/%04d".format(day, month + 1, year)
+            },
+            2025, 4, 1 // año, mes(0-based), día
+        )
+    }
+
+    val gradient = Brush.verticalGradient(
+        listOf(Color(0xFF3EA8FE).copy(alpha = .25f), Color.White)
+    )
+
+    Box(
+        modifier = Modifier
+            .fillMaxSize()
+            .background(gradient)
+    ) {
+        Column(
+            modifier = Modifier
+                .fillMaxSize()
+                .verticalScroll(rememberScrollState())
+                .padding(horizontal = 16.dp, vertical = 24.dp),
+            horizontalAlignment = Alignment.CenterHorizontally
+        ) {
+            Spacer(Modifier.height(20.dp))
+
+            ProfileContainer(
+                imageResId = R.drawable.imagenprueba,
+                size = 110.dp,
+                contentDescription = "Foto de perfil"
+            )
+
+            Spacer(Modifier.height(16.dp))
+
+            SecondaryButton(
+                text = "Cambiar Foto",
+                onClick = onChangePhoto,
+                modifier = Modifier
+                    .width(150.dp)
+                    .height(40.dp)
+            )
+
+            Spacer(Modifier.height(24.dp))
+
+            Subtitle(text = "Nombre de usuario:")
+            InputText(
+                value = "nora soto",
+                onValueChange = { /* TODO */ },
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(top = 8.dp)
+            )
 
-                    Subtitle(
-                        text = "Correo electrónico:",
-                        modifier = Modifier.padding(top = 20.dp)
-                    )
-                    /*var email by remember { mutableStateOf("") } //Este input tiene el formato de registro
-                    InputEmail(
-                        value = email,
-                        onValueChange = { email = it }
-                    )*/
-                    InputText(
-                        value = "norasoto5@gmail.com", //Colocar el nombre del usuario desde Firebase
-                        onValueChange = { },
-                        modifier = Modifier.padding(top = 10.dp)
-                    )
-                    Caption(
-                        text = "El correo electrónico no es editable"
-                    )
+            Spacer(Modifier.height(16.dp))
+
+            Subtitle(text = "Correo electrónico:")
+            InputText(
+                value = "norasoto5@gmail.com",
+                onValueChange = { /* no editable */ },
+                modifier = Modifier
+                    .fillMaxWidth()
+            )
+            Spacer(Modifier.height(2.dp))
+            Caption(
+                text = "El correo electrónico no es editable"
+            )
 
-                    Subtitle(
-                        text = "Fecha de nacimiento:",
-                        modifier = Modifier.padding(top = 20.dp)
-                    )
-                    var date by remember { mutableStateOf("01/05/2025") }
-                    InputDate(selectedDate = date, onDateSelected = { date = it })
-                    //Falta icono de editar (lapiz)
+            Spacer(Modifier.height(16.dp))
+
+            Subtitle(text = "Fecha de nacimiento:")
+            InputDate(
+                value = date,
+                onClick = { datePicker.show() },
+                modifier = Modifier
+                    .fillMaxWidth()
+            )
 
-                    Subtitle(
-                        text = "Contraseña:",
-                        modifier = Modifier.padding(top = 20.dp)
-                    )
-                    InputText(
-                        value = "********", //Colocar contraseña encriptada desde Firebase
-                        onValueChange = { },
-                        modifier = Modifier
-                            .padding(top = 10.dp)
-                    )
-                    //Falta icono de editar (lapiz)
-                    Box(modifier = Modifier.fillMaxSize()) {
-                        Row(
-                            modifier = Modifier
-                                .align(Alignment.TopCenter)
-                                .padding(top = 50.dp), // Padding externo (alrededor de toda la fila)
-
-                            horizontalArrangement = Arrangement.spacedBy(30.dp), // Espacio entre los elementos de la fila
-                            verticalAlignment = Alignment.CenterVertically
-                        ) {
-                            SecondaryButton(
-                                text = "Guardar",
-                                onClick = {} //Mostrar mensaje de confirmacion o warning (si no se hicieron cambios)
-                            )
-
-                            SecondaryButton(
-                                text = "Cancelar",
-                                onClick = {} //Mostrar mensaje de alerta
-                            )
-                        }
-                    }
-                    //Agregar navbar
-                }
-            }
-        }
-        Header(
-            title = "Editar Información Personal",
-            // Si se ingresa a esta pantalla desde los ajustes, el boton de regreso onBackClick lleva a ajustes, no a Visualizar perfil *
-            showBackButton = true,
-            onBackClick = { }, //Redireccionar a Visualizar perfil
-            profileImage = null
-        )
-    }
-}*/
\ No newline at end of file
+            Spacer(Modifier.height(10.dp))
+
+            Subtitle(text = "Contraseña:")
+            InputText(
+                value = "********",
+                onValueChange = { /* TODO */ },
+                modifier = Modifier
+                    .fillMaxWidth()
+            )
+
+            Spacer(Modifier.height(16.dp))
+
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.spacedBy(16.dp)
+            ) {
+                SecondaryButton(
+                    text = "Guardar",
+                    onClick = onSave,
+                    modifier = Modifier.weight(1f)
+                )
+                SecondaryButton(
+                    text = "Cancelar",
+                    onClick = onCancel,
+                    modifier = Modifier
+                        .width(150.dp)
+                        .height(40.dp)
+                )
+            }
+        }
+    }
+}
+
+@Preview(showBackground = true, widthDp = 360, heightDp = 640)
+@Composable
+fun PreviewFeatureEditProfileScreen() {
+    EditProfileScreen()
+}
